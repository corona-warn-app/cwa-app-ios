version: 2.1

configuration:
  - cache_key: &cache_key v9-{{ checksum "src/xcode/Gemfile.lock" }}
  - tools_cache_key: &tools_cache_key v3-{{ checksum "Brewfile.lock.json" }}
  - xcode_version: &xcode_version 12.5.1
  - resource_class: &resource_class large

###
### COMMANDS ###
###

commands:
  prepare-dependencies:
    steps:
      - checkout
      - run:
          name: fix SwiftPM #Solves an old Xcode 11 issue that seems to got reintroduced with Xcode 12: https://stackoverflow.com/questions/58125659/github-actions-xcodebuild-fails-due-to-server-fingerprint
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - restore_cache:
          key: *cache_key
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Brew bundle
          command: |
            brew bundle
      - run:
          name: Install Bundler
          command: sudo gem install rake bundler:2.1.4
      - run:
          name: Install dependencies
          command: cd src/xcode && bundle install --path=vendor --jobs=8
      - save_cache:
          key: *tools_cache_key
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew
            - /Users/distiller/.rubies/ruby-*/bin/
      - save_cache:
          key: *cache_key
          paths:
            - src/xcode/vendor/
            - /usr/local/Cellar/
            - /usr/local/opt/
            - /usr/local/bin/

###
### JOBS ###
###

jobs:
  dependencies:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - prepare-dependencies
      - persist_to_workspace:
          root: .
          paths:
            - .
  build-for-testing:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build for testing
          command: |
            cd src/xcode && \
            xcodebuild \
              -workspace "ENA.xcworkspace" \
              -scheme ENA \
              -destination "platform=iOS Simulator,OS=14.5,name=iPhone 11" \
              -testPlan AllTests \
              -only-test-configuration "DE" \
              -derivedDataPath "./DerivedData" \
              -jobs `sysctl -n hw.ncpu` \
              -parallelizeTargets \
              -quiet \
              build-for-testing
      - persist_to_workspace:
          root: .
          paths:
            - "src/xcode/DerivedData/**/*"
  swiftlint:
    macos:
      xcode: *xcode_version
    resource_class: medium
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *cache_key
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Swiftlint
          command: |
            vendor/swiftlint --version
            cd src/xcode && bundle exec fastlane lint
      - store_artifacts:
          path: src/xcode/swiftlint.html
  analyze:
    macos:
      xcode: *xcode_version
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *cache_key
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Analyze (experimental)
          command: |
            vendor/swiftlint --version
            cd src/xcode && bundle exec fastlane analyze || true
      - store_artifacts:
          path: src/xcode/swiftlint.analyze.html
  test:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    parameters:
      testplan:
        default: "AllTests"
        type: string
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Run Fastlane tests
          command: cd src/xcode && bundle exec fastlane test testplan:<<parameters.testplan>>
          no_output_timeout: 5m
      - restore_cache:
          key: sonar-cloud-v2
      - run:
          name: Convert coverage information to SonarCloud format
          shell: /bin/zsh
          command: |
            ./scripts/cococo \
              src/xcode/fastlane/test_output/ENA.xcresult > \
              src/xcode/fastlane/test_output/coverage.xml
      - store_test_results:
          path: src/xcode/fastlane/test_output/
      - store_artifacts:
          path: src/xcode/fastlane/test_output/ENA.xcresult.zip
      - run:
          name: Skip SonarCloud for external Pull Requests
          shell: /bin/zsh
          command: '[[ -v CIRCLE_PR_REPONAME ]] && circleci-agent step halt || true'
      - run:
          name: Install and run sonar-scanner
          shell: /bin/zsh
          command: |
            SCANNER=sonar-scanner-cli-4.3.0.2102-macosx
            SCANNERDIR=~/sonar/sonar-scanner-4.3.0.2102-macosx
            if [[ ! -x "$SCANNERDIR/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$SCANNER.zip
              unzip -qq -o $SCANNER.zip -d ~/sonar/
            fi
            chmod +x $SCANNERDIR/bin/sonar-scanner
            chmod +x $SCANNERDIR/jre/bin/java
            $SCANNERDIR/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: sonar-cloud-v2
          paths:
            - ~/sonar/
  test-community:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Run Fastlane smoke tests
          command: cd src/xcode && bundle exec fastlane test_community
          no_output_timeout: 10m
      - store_test_results:
          path: src/xcode/fastlane/test_output/
      - store_artifacts:
          path: src/xcode/fastlane/test_output/ENACommunity.xcresult.zip
  snapshot:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    parameters:
      language:
        default: "de-DE"
        type: string
      displaymode:
        default: "light"
        type: string
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *tools_cache_key
      - run:
          name: Snapshot
          command: cd src/xcode && bundle exec fastlane screenshot languages:<<parameters.language>> mode:<<parameters.displaymode>>
          no_output_timeout: 35m
      - store_test_results:
          # Fastlane's snapshot only defines one output path which is intended forscreenshots
          # test results also land here which is the reason of this weird path
          path: src/xcode/fastlane/test_output/<<parameters.language>>-<<parameters.displaymode>>/
      - persist_to_workspace:
          root: .
          paths:
            - src/xcode/screenshots/*
  collect-snapshots:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Package Screenshots
          command: cd src/xcode && tar -czf screenshots/screenshots.tar.gz --exclude='*.tar.gz' --exclude='test_output' screenshots && cd -
      - store_artifacts:
          path: src/xcode/screenshots/screenshots.tar.gz
      - run:
          name: Announce new screenshots to MS Teams
          command: ./scripts/announce_screenshots.sh https://${CIRCLE_BUILD_NUM}-268042230-gh.circle-artifacts.com/0/src/xcode/screenshots/screenshots.tar.gz
  testflight-release:
    macos:
      xcode: *xcode_version
    resource_class: *resource_class
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *tools_cache_key
      - run: brew bundle
      - run: ./scripts/switch_to_dev_env.sh
      - run:
          name: fastlane testflight
          command: cd src/xcode && bundle exec fastlane betaRelease --env TestFlight
      - run:
          name: fastlane appcenter and Mobile Device Cloud
          command: cd src/xcode && bundle exec fastlane adHocDistribution
  update-docs:
    macos:
      xcode: *xcode_version
    resource_class: medium
    shell: /bin/zsh
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: *tools_cache_key
      - add_ssh_keys:
          fingerprints:
            - "2c:ea:55:72:82:d9:8a:35:02:ac:25:a6:39:3c:e4:23"
      - run:
          name: Run lane for doc update
          command: cd src/xcode && bundle exec fastlane updateDocs

###
### WORKFLOWS ###
###

workflows:
    build-and-test:
      jobs:
        - dependencies
        - swiftlint:
            requires:
              - dependencies
        - test:
            matrix:
              parameters:
                testplan: ["UnitTests"]
            requires:
              - dependencies
            filters:
              branches:
                ignore:
                  - /release\/.*/
        - test:
            matrix:
              parameters:
                testplan: ["AllTests"]
            requires:
              - dependencies
            filters:
              branches:
                only:
                  - /release\/.*/
        - test-community:
            requires:
              - dependencies
        - snapshot:
            matrix:
              parameters:
                language: ["de-DE", "en-EN"]
                displaymode: ["dark", "light"]
            requires:
              - dependencies
            filters:
              branches:
                only:
                  - /release\/.*/
        - collect-snapshots:
            requires:
              - snapshot
        - update-docs:
            requires:
              - dependencies
            filters:
              branches:
                only:
                  - main

    beta-release:
      jobs:
        - dependencies:
            filters:
              tags:
                only:
                  - /^v.*/
              branches:
                ignore: /.*/
        - test:
            requires:
              - dependencies
            filters:
              tags:
                only:
                  - /^v.*/
              branches:
                ignore: /.*/
        - snapshot:
            matrix:
              parameters:
                language: ["de-DE", "en-EN"]
                displaymode: ["dark", "light"]
            requires:
              - dependencies
            filters:
              branches:
                only:
                  - /release\/.*/
        - collect-snapshots:
            requires:
              - snapshot
            filters:
              tags:
                only:
                  - /^v.*/
              branches:
                ignore: /.*/
        - testflight-release:
            requires:
              - dependencies
            filters:
              tags:
                only:
                  - /^v.*/
              branches:
                ignore: /.*/
