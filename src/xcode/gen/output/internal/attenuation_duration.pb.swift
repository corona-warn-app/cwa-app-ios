// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/attenuation_duration.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_AttenuationDuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thresholds: SAP_Internal_Thresholds {
    get {return _thresholds ?? SAP_Internal_Thresholds()}
    set {_thresholds = newValue}
  }
  /// Returns true if `thresholds` has been explicitly set.
  var hasThresholds: Bool {return self._thresholds != nil}
  /// Clears the value of `thresholds`. Subsequent reads from it will return its default value.
  mutating func clearThresholds() {self._thresholds = nil}

  var weights: SAP_Internal_Weights {
    get {return _weights ?? SAP_Internal_Weights()}
    set {_weights = newValue}
  }
  /// Returns true if `weights` has been explicitly set.
  var hasWeights: Bool {return self._weights != nil}
  /// Clears the value of `weights`. Subsequent reads from it will return its default value.
  mutating func clearWeights() {self._weights = nil}

  var defaultBucketOffset: Int32 = 0

  var riskScoreNormalizationDivisor: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _thresholds: SAP_Internal_Thresholds? = nil
  fileprivate var _weights: SAP_Internal_Weights? = nil
}

struct SAP_Internal_Thresholds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lower: Int32 = 0

  var upper: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Weights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var low: Double = 0

  var mid: Double = 0

  var high: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal"

extension SAP_Internal_AttenuationDuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttenuationDuration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thresholds"),
    2: .same(proto: "weights"),
    3: .same(proto: "defaultBucketOffset"),
    4: .same(proto: "riskScoreNormalizationDivisor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._thresholds) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._weights) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.defaultBucketOffset) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.riskScoreNormalizationDivisor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._thresholds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._weights {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.defaultBucketOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultBucketOffset, fieldNumber: 3)
    }
    if self.riskScoreNormalizationDivisor != 0 {
      try visitor.visitSingularInt32Field(value: self.riskScoreNormalizationDivisor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_AttenuationDuration, rhs: SAP_Internal_AttenuationDuration) -> Bool {
    if lhs._thresholds != rhs._thresholds {return false}
    if lhs._weights != rhs._weights {return false}
    if lhs.defaultBucketOffset != rhs.defaultBucketOffset {return false}
    if lhs.riskScoreNormalizationDivisor != rhs.riskScoreNormalizationDivisor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Thresholds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Thresholds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lower"),
    2: .same(proto: "upper"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lower) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.upper) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lower != 0 {
      try visitor.visitSingularInt32Field(value: self.lower, fieldNumber: 1)
    }
    if self.upper != 0 {
      try visitor.visitSingularInt32Field(value: self.upper, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Thresholds, rhs: SAP_Internal_Thresholds) -> Bool {
    if lhs.lower != rhs.lower {return false}
    if lhs.upper != rhs.upper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Weights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Weights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "low"),
    2: .same(proto: "mid"),
    3: .same(proto: "high"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.low) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.mid) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.high) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.low != 0 {
      try visitor.visitSingularDoubleField(value: self.low, fieldNumber: 1)
    }
    if self.mid != 0 {
      try visitor.visitSingularDoubleField(value: self.mid, fieldNumber: 2)
    }
    if self.high != 0 {
      try visitor.visitSingularDoubleField(value: self.high, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Weights, rhs: SAP_Internal_Weights) -> Bool {
    if lhs.low != rhs.low {return false}
    if lhs.mid != rhs.mid {return false}
    if lhs.high != rhs.high {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
