// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/evreg/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SAP_Internal_Evreg_EventType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case otherEvent // = 1
  case otherLocation // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .otherEvent
    case 2: self = .otherLocation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .otherEvent: return 1
    case .otherLocation: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension SAP_Internal_Evreg_EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SAP_Internal_Evreg_EventType] = [
    .unspecified,
    .otherEvent,
    .otherLocation,
  ]
}

#endif  // swift(>=4.2)

struct SAP_Internal_Evreg_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 16 random bytes
  var guid: Data = Data()

  var type: SAP_Internal_Evreg_EventType = .unspecified

  /// max. 150 characters
  var description_p: String = String()

  /// max. 150 characters
  var address: String = String()

  /// UNIX timestamp (in seconds)
  var start: UInt64 = 0

  /// UNIX timestamp (in seconds)
  var end: UInt64 = 0

  var defaultCheckInLengthInMinutes: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_Evreg_EventType: @unchecked Sendable {}
extension SAP_Internal_Evreg_Event: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.evreg"

extension SAP_Internal_Evreg_EventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT_TYPE_UNSPECIFIED"),
    1: .same(proto: "EVENT_TYPE_OTHER_EVENT"),
    2: .same(proto: "EVENT_TYPE_OTHER_LOCATION"),
  ]
}

extension SAP_Internal_Evreg_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "guid"),
    2: .same(proto: "type"),
    3: .same(proto: "description"),
    4: .same(proto: "address"),
    5: .same(proto: "start"),
    6: .same(proto: "end"),
    7: .same(proto: "defaultCheckInLengthInMinutes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.guid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.start) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.end) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.defaultCheckInLengthInMinutes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.guid.isEmpty {
      try visitor.visitSingularBytesField(value: self.guid, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if self.start != 0 {
      try visitor.visitSingularUInt64Field(value: self.start, fieldNumber: 5)
    }
    if self.end != 0 {
      try visitor.visitSingularUInt64Field(value: self.end, fieldNumber: 6)
    }
    if self.defaultCheckInLengthInMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.defaultCheckInLengthInMinutes, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_Event, rhs: SAP_Internal_Evreg_Event) -> Bool {
    if lhs.guid != rhs.guid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.address != rhs.address {return false}
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.defaultCheckInLengthInMinutes != rhs.defaultCheckInLengthInMinutes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
