// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/evreg/check_in_export.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_Evreg_CheckInExport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkIns: [SAP_Internal_Evreg_CheckInExportItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Evreg_CheckInExportItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trl: UInt32 = 0

  /// 16 byte random string
  var eventKey: Data = Data()

  var checkinTime: UInt32 = 0

  var checkoutTime: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Evreg_CheckInExportOption1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkIns: [SAP_Internal_Evreg_CheckInOption1] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Evreg_CheckInExportOption2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkIns: [SAP_Internal_Evreg_CheckInOption2] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Evreg_CheckInExportOption3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkIns: [SAP_Internal_Evreg_CheckInOption3] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_Evreg_CheckInExport: @unchecked Sendable {}
extension SAP_Internal_Evreg_CheckInExportItem: @unchecked Sendable {}
extension SAP_Internal_Evreg_CheckInExportOption1: @unchecked Sendable {}
extension SAP_Internal_Evreg_CheckInExportOption2: @unchecked Sendable {}
extension SAP_Internal_Evreg_CheckInExportOption3: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.evreg"

extension SAP_Internal_Evreg_CheckInExport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckInExport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkIns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.checkIns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkIns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.checkIns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_CheckInExport, rhs: SAP_Internal_Evreg_CheckInExport) -> Bool {
    if lhs.checkIns != rhs.checkIns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Evreg_CheckInExportItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckInExportItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trl"),
    2: .same(proto: "eventKey"),
    3: .same(proto: "checkinTime"),
    4: .same(proto: "checkoutTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.trl) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.eventKey) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.checkinTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.checkoutTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trl != 0 {
      try visitor.visitSingularUInt32Field(value: self.trl, fieldNumber: 1)
    }
    if !self.eventKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.eventKey, fieldNumber: 2)
    }
    if self.checkinTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.checkinTime, fieldNumber: 3)
    }
    if self.checkoutTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.checkoutTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_CheckInExportItem, rhs: SAP_Internal_Evreg_CheckInExportItem) -> Bool {
    if lhs.trl != rhs.trl {return false}
    if lhs.eventKey != rhs.eventKey {return false}
    if lhs.checkinTime != rhs.checkinTime {return false}
    if lhs.checkoutTime != rhs.checkoutTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Evreg_CheckInExportOption1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckInExportOption1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkIns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.checkIns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkIns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.checkIns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_CheckInExportOption1, rhs: SAP_Internal_Evreg_CheckInExportOption1) -> Bool {
    if lhs.checkIns != rhs.checkIns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Evreg_CheckInExportOption2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckInExportOption2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkIns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.checkIns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkIns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.checkIns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_CheckInExportOption2, rhs: SAP_Internal_Evreg_CheckInExportOption2) -> Bool {
    if lhs.checkIns != rhs.checkIns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Evreg_CheckInExportOption3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckInExportOption3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkIns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.checkIns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkIns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.checkIns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_CheckInExportOption3, rhs: SAP_Internal_Evreg_CheckInExportOption3) -> Bool {
    if lhs.checkIns != rhs.checkIns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
