// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/evreg/poster_template.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_Evreg_PosterTemplateAndroid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// SVG
  var template: Data = Data()

  var offsetX: Float = 0

  var offsetY: Float = 0

  var qrCodeSideLength: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Evreg_PosterTemplateIOS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PDF
  var template: Data = Data()

  var offsetX: UInt32 = 0

  var offsetY: UInt32 = 0

  var qrCodeSideLength: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_Evreg_PosterTemplateAndroid: @unchecked Sendable {}
extension SAP_Internal_Evreg_PosterTemplateIOS: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.evreg"

extension SAP_Internal_Evreg_PosterTemplateAndroid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PosterTemplateAndroid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "template"),
    2: .same(proto: "offsetX"),
    3: .same(proto: "offsetY"),
    4: .same(proto: "qrCodeSideLength"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.template) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.offsetX) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.offsetY) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.qrCodeSideLength) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.template.isEmpty {
      try visitor.visitSingularBytesField(value: self.template, fieldNumber: 1)
    }
    if self.offsetX != 0 {
      try visitor.visitSingularFloatField(value: self.offsetX, fieldNumber: 2)
    }
    if self.offsetY != 0 {
      try visitor.visitSingularFloatField(value: self.offsetY, fieldNumber: 3)
    }
    if self.qrCodeSideLength != 0 {
      try visitor.visitSingularUInt32Field(value: self.qrCodeSideLength, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_PosterTemplateAndroid, rhs: SAP_Internal_Evreg_PosterTemplateAndroid) -> Bool {
    if lhs.template != rhs.template {return false}
    if lhs.offsetX != rhs.offsetX {return false}
    if lhs.offsetY != rhs.offsetY {return false}
    if lhs.qrCodeSideLength != rhs.qrCodeSideLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Evreg_PosterTemplateIOS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PosterTemplateIOS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "template"),
    2: .same(proto: "offsetX"),
    3: .same(proto: "offsetY"),
    4: .same(proto: "qrCodeSideLength"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.template) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.offsetX) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.offsetY) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.qrCodeSideLength) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.template.isEmpty {
      try visitor.visitSingularBytesField(value: self.template, fieldNumber: 1)
    }
    if self.offsetX != 0 {
      try visitor.visitSingularUInt32Field(value: self.offsetX, fieldNumber: 2)
    }
    if self.offsetY != 0 {
      try visitor.visitSingularUInt32Field(value: self.offsetY, fieldNumber: 3)
    }
    if self.qrCodeSideLength != 0 {
      try visitor.visitSingularUInt32Field(value: self.qrCodeSideLength, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Evreg_PosterTemplateIOS, rhs: SAP_Internal_Evreg_PosterTemplateIOS) -> Bool {
    if lhs.template != rhs.template {return false}
    if lhs.offsetX != rhs.offsetX {return false}
    if lhs.offsetY != rhs.offsetY {return false}
    if lhs.qrCodeSideLength != rhs.qrCodeSideLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
