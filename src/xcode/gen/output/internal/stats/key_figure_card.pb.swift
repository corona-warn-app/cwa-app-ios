// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/stats/key_figure_card.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_Stats_KeyFigureCard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: SAP_Internal_Stats_CardHeader {
    get {return _header ?? SAP_Internal_Stats_CardHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var keyFigures: [SAP_Internal_Stats_KeyFigure] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: SAP_Internal_Stats_CardHeader? = nil
}

struct SAP_Internal_Stats_KeyFigure {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rank: SAP_Internal_Stats_KeyFigure.Rank = .unspecifiedRank

  var value: Double = 0

  /// zero by default; formatted as integer then
  var decimals: Int32 = 0

  var trend: SAP_Internal_Stats_KeyFigure.Trend = .unspecifiedTrend

  var trendSemantic: SAP_Internal_Stats_KeyFigure.TrendSemantic = .unspecifiedTrendSemantic

  /// may overrule header.updatedAt if != 0
  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Rank: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedRank // = 0
    case primary // = 1
    case secondary // = 2
    case tertiary // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedRank
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedRank
      case 1: self = .primary
      case 2: self = .secondary
      case 3: self = .tertiary
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedRank: return 0
      case .primary: return 1
      case .secondary: return 2
      case .tertiary: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Trend: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedTrend // = 0
    case stable // = 1
    case increasing // = 2
    case decreasing // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedTrend
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedTrend
      case 1: self = .stable
      case 2: self = .increasing
      case 3: self = .decreasing
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedTrend: return 0
      case .stable: return 1
      case .increasing: return 2
      case .decreasing: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TrendSemantic: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecifiedTrendSemantic // = 0
    case neutral // = 1
    case positive // = 2
    case negative // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecifiedTrendSemantic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedTrendSemantic
      case 1: self = .neutral
      case 2: self = .positive
      case 3: self = .negative
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecifiedTrendSemantic: return 0
      case .neutral: return 1
      case .positive: return 2
      case .negative: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SAP_Internal_Stats_KeyFigure.Rank: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SAP_Internal_Stats_KeyFigure.Rank] = [
    .unspecifiedRank,
    .primary,
    .secondary,
    .tertiary,
  ]
}

extension SAP_Internal_Stats_KeyFigure.Trend: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SAP_Internal_Stats_KeyFigure.Trend] = [
    .unspecifiedTrend,
    .stable,
    .increasing,
    .decreasing,
  ]
}

extension SAP_Internal_Stats_KeyFigure.TrendSemantic: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SAP_Internal_Stats_KeyFigure.TrendSemantic] = [
    .unspecifiedTrendSemantic,
    .neutral,
    .positive,
    .negative,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_Stats_KeyFigureCard: @unchecked Sendable {}
extension SAP_Internal_Stats_KeyFigure: @unchecked Sendable {}
extension SAP_Internal_Stats_KeyFigure.Rank: @unchecked Sendable {}
extension SAP_Internal_Stats_KeyFigure.Trend: @unchecked Sendable {}
extension SAP_Internal_Stats_KeyFigure.TrendSemantic: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.stats"

extension SAP_Internal_Stats_KeyFigureCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyFigureCard"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "keyFigures"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyFigures) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.keyFigures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyFigures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Stats_KeyFigureCard, rhs: SAP_Internal_Stats_KeyFigureCard) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.keyFigures != rhs.keyFigures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Stats_KeyFigure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyFigure"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rank"),
    2: .same(proto: "value"),
    3: .same(proto: "decimals"),
    4: .same(proto: "trend"),
    5: .same(proto: "trendSemantic"),
    6: .same(proto: "updatedAt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.rank) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.decimals) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.trend) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.trendSemantic) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rank != .unspecifiedRank {
      try visitor.visitSingularEnumField(value: self.rank, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 2)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt32Field(value: self.decimals, fieldNumber: 3)
    }
    if self.trend != .unspecifiedTrend {
      try visitor.visitSingularEnumField(value: self.trend, fieldNumber: 4)
    }
    if self.trendSemantic != .unspecifiedTrendSemantic {
      try visitor.visitSingularEnumField(value: self.trendSemantic, fieldNumber: 5)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Stats_KeyFigure, rhs: SAP_Internal_Stats_KeyFigure) -> Bool {
    if lhs.rank != rhs.rank {return false}
    if lhs.value != rhs.value {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.trend != rhs.trend {return false}
    if lhs.trendSemantic != rhs.trendSemantic {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Stats_KeyFigure.Rank: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_RANK"),
    1: .same(proto: "PRIMARY"),
    2: .same(proto: "SECONDARY"),
    3: .same(proto: "TERTIARY"),
  ]
}

extension SAP_Internal_Stats_KeyFigure.Trend: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TREND"),
    1: .same(proto: "STABLE"),
    2: .same(proto: "INCREASING"),
    3: .same(proto: "DECREASING"),
  ]
}

extension SAP_Internal_Stats_KeyFigure.TrendSemantic: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TREND_SEMANTIC"),
    1: .same(proto: "NEUTRAL"),
    2: .same(proto: "POSITIVE"),
    3: .same(proto: "NEGATIVE"),
  ]
}
