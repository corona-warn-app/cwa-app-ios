// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/dgc/value_sets.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_Dgc_ValueSets {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// General
  /// Disease or agent targeted
  var tg: SAP_Internal_Dgc_ValueSet {
    get {return _tg ?? SAP_Internal_Dgc_ValueSet()}
    set {_tg = newValue}
  }
  /// Returns true if `tg` has been explicitly set.
  var hasTg: Bool {return self._tg != nil}
  /// Clears the value of `tg`. Subsequent reads from it will return its default value.
  mutating func clearTg() {self._tg = nil}

  /// Vaccination Certificates
  /// Vaccine or prophylaxis
  var vp: SAP_Internal_Dgc_ValueSet {
    get {return _vp ?? SAP_Internal_Dgc_ValueSet()}
    set {_vp = newValue}
  }
  /// Returns true if `vp` has been explicitly set.
  var hasVp: Bool {return self._vp != nil}
  /// Clears the value of `vp`. Subsequent reads from it will return its default value.
  mutating func clearVp() {self._vp = nil}

  /// Vaccine medicinal product
  var mp: SAP_Internal_Dgc_ValueSet {
    get {return _mp ?? SAP_Internal_Dgc_ValueSet()}
    set {_mp = newValue}
  }
  /// Returns true if `mp` has been explicitly set.
  var hasMp: Bool {return self._mp != nil}
  /// Clears the value of `mp`. Subsequent reads from it will return its default value.
  mutating func clearMp() {self._mp = nil}

  /// Marketing Authorization Holder
  var ma: SAP_Internal_Dgc_ValueSet {
    get {return _ma ?? SAP_Internal_Dgc_ValueSet()}
    set {_ma = newValue}
  }
  /// Returns true if `ma` has been explicitly set.
  var hasMa: Bool {return self._ma != nil}
  /// Clears the value of `ma`. Subsequent reads from it will return its default value.
  mutating func clearMa() {self._ma = nil}

  /// Test Certificates
  /// Type of Test
  var tcTt: SAP_Internal_Dgc_ValueSet {
    get {return _tcTt ?? SAP_Internal_Dgc_ValueSet()}
    set {_tcTt = newValue}
  }
  /// Returns true if `tcTt` has been explicitly set.
  var hasTcTt: Bool {return self._tcTt != nil}
  /// Clears the value of `tcTt`. Subsequent reads from it will return its default value.
  mutating func clearTcTt() {self._tcTt = nil}

  /// RAT Test name and manufacturer
  var tcMa: SAP_Internal_Dgc_ValueSet {
    get {return _tcMa ?? SAP_Internal_Dgc_ValueSet()}
    set {_tcMa = newValue}
  }
  /// Returns true if `tcMa` has been explicitly set.
  var hasTcMa: Bool {return self._tcMa != nil}
  /// Clears the value of `tcMa`. Subsequent reads from it will return its default value.
  mutating func clearTcMa() {self._tcMa = nil}

  /// Test Result
  var tcTr: SAP_Internal_Dgc_ValueSet {
    get {return _tcTr ?? SAP_Internal_Dgc_ValueSet()}
    set {_tcTr = newValue}
  }
  /// Returns true if `tcTr` has been explicitly set.
  var hasTcTr: Bool {return self._tcTr != nil}
  /// Clears the value of `tcTr`. Subsequent reads from it will return its default value.
  mutating func clearTcTr() {self._tcTr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tg: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _vp: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _mp: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _ma: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _tcTt: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _tcMa: SAP_Internal_Dgc_ValueSet? = nil
  fileprivate var _tcTr: SAP_Internal_Dgc_ValueSet? = nil
}

struct SAP_Internal_Dgc_ValueSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// use custom message instead of map to allow for future extensions
  var items: [SAP_Internal_Dgc_ValueSetItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_Dgc_ValueSetItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var displayText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_Dgc_ValueSets: @unchecked Sendable {}
extension SAP_Internal_Dgc_ValueSet: @unchecked Sendable {}
extension SAP_Internal_Dgc_ValueSetItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.dgc"

extension SAP_Internal_Dgc_ValueSets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValueSets"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "tg"),
    1: .same(proto: "vp"),
    2: .same(proto: "mp"),
    3: .same(proto: "ma"),
    5: .same(proto: "tcTt"),
    6: .same(proto: "tcMa"),
    7: .same(proto: "tcTr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._mp) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ma) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._tg) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._tcTt) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._tcMa) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._tcTr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._vp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ma {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._tg {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._tcTt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._tcMa {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._tcTr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Dgc_ValueSets, rhs: SAP_Internal_Dgc_ValueSets) -> Bool {
    if lhs._tg != rhs._tg {return false}
    if lhs._vp != rhs._vp {return false}
    if lhs._mp != rhs._mp {return false}
    if lhs._ma != rhs._ma {return false}
    if lhs._tcTt != rhs._tcTt {return false}
    if lhs._tcMa != rhs._tcMa {return false}
    if lhs._tcTr != rhs._tcTr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Dgc_ValueSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValueSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Dgc_ValueSet, rhs: SAP_Internal_Dgc_ValueSet) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_Dgc_ValueSetItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValueSetItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "displayText"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.displayText.isEmpty {
      try visitor.visitSingularStringField(value: self.displayText, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_Dgc_ValueSetItem, rhs: SAP_Internal_Dgc_ValueSetItem) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.displayText != rhs.displayText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
