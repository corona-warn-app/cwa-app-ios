// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/v2/key_download_parameters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_V2_KeyDownloadParametersIOS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var revokedDayPackages: [SAP_Internal_V2_DayPackageMetadata] = []

  var revokedHourPackages: [SAP_Internal_V2_HourPackageMetadata] = []

  var revokedTraceWarningPackages: [SAP_Internal_V2_TraceWarningPackageMetadata] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_V2_KeyDownloadParametersAndroid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var revokedDayPackages: [SAP_Internal_V2_DayPackageMetadata] = []

  var revokedHourPackages: [SAP_Internal_V2_HourPackageMetadata] = []

  var downloadTimeoutInSeconds: Int32 = 0

  var overallTimeoutInSeconds: Int32 = 0

  var revokedTraceWarningPackages: [SAP_Internal_V2_TraceWarningPackageMetadata] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_V2_DayPackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var region: String = String()

  var date: String = String()

  var etag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_V2_HourPackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var region: String = String()

  var date: String = String()

  var hour: Int32 = 0

  var etag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_Internal_V2_TraceWarningPackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var etag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SAP_Internal_V2_KeyDownloadParametersIOS: @unchecked Sendable {}
extension SAP_Internal_V2_KeyDownloadParametersAndroid: @unchecked Sendable {}
extension SAP_Internal_V2_DayPackageMetadata: @unchecked Sendable {}
extension SAP_Internal_V2_HourPackageMetadata: @unchecked Sendable {}
extension SAP_Internal_V2_TraceWarningPackageMetadata: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.v2"

extension SAP_Internal_V2_KeyDownloadParametersIOS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyDownloadParametersIOS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revokedDayPackages"),
    2: .same(proto: "revokedHourPackages"),
    3: .same(proto: "revokedTraceWarningPackages"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.revokedDayPackages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.revokedHourPackages) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.revokedTraceWarningPackages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.revokedDayPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedDayPackages, fieldNumber: 1)
    }
    if !self.revokedHourPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedHourPackages, fieldNumber: 2)
    }
    if !self.revokedTraceWarningPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedTraceWarningPackages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_KeyDownloadParametersIOS, rhs: SAP_Internal_V2_KeyDownloadParametersIOS) -> Bool {
    if lhs.revokedDayPackages != rhs.revokedDayPackages {return false}
    if lhs.revokedHourPackages != rhs.revokedHourPackages {return false}
    if lhs.revokedTraceWarningPackages != rhs.revokedTraceWarningPackages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_KeyDownloadParametersAndroid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyDownloadParametersAndroid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revokedDayPackages"),
    2: .same(proto: "revokedHourPackages"),
    3: .same(proto: "downloadTimeoutInSeconds"),
    4: .same(proto: "overallTimeoutInSeconds"),
    5: .same(proto: "revokedTraceWarningPackages"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.revokedDayPackages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.revokedHourPackages) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.downloadTimeoutInSeconds) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.overallTimeoutInSeconds) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.revokedTraceWarningPackages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.revokedDayPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedDayPackages, fieldNumber: 1)
    }
    if !self.revokedHourPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedHourPackages, fieldNumber: 2)
    }
    if self.downloadTimeoutInSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.downloadTimeoutInSeconds, fieldNumber: 3)
    }
    if self.overallTimeoutInSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.overallTimeoutInSeconds, fieldNumber: 4)
    }
    if !self.revokedTraceWarningPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.revokedTraceWarningPackages, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_KeyDownloadParametersAndroid, rhs: SAP_Internal_V2_KeyDownloadParametersAndroid) -> Bool {
    if lhs.revokedDayPackages != rhs.revokedDayPackages {return false}
    if lhs.revokedHourPackages != rhs.revokedHourPackages {return false}
    if lhs.downloadTimeoutInSeconds != rhs.downloadTimeoutInSeconds {return false}
    if lhs.overallTimeoutInSeconds != rhs.overallTimeoutInSeconds {return false}
    if lhs.revokedTraceWarningPackages != rhs.revokedTraceWarningPackages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_DayPackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DayPackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "date"),
    3: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 2)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_DayPackageMetadata, rhs: SAP_Internal_V2_DayPackageMetadata) -> Bool {
    if lhs.region != rhs.region {return false}
    if lhs.date != rhs.date {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_HourPackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HourPackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "date"),
    3: .same(proto: "hour"),
    4: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.hour) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 2)
    }
    if self.hour != 0 {
      try visitor.visitSingularInt32Field(value: self.hour, fieldNumber: 3)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_HourPackageMetadata, rhs: SAP_Internal_V2_HourPackageMetadata) -> Bool {
    if lhs.region != rhs.region {return false}
    if lhs.date != rhs.date {return false}
    if lhs.hour != rhs.hour {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_TraceWarningPackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TraceWarningPackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_TraceWarningPackageMetadata, rhs: SAP_Internal_V2_TraceWarningPackageMetadata) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
