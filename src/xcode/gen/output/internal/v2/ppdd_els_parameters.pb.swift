// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/v2/ppdd_els_parameters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_V2_PPDDErrorLogSharingParametersIOS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon {
    get {return _common ?? SAP_Internal_V2_PPDDErrorLogSharingParametersCommon()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {self._common = nil}

  var ppac: SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersIOS {
    get {return _ppac ?? SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersIOS()}
    set {_ppac = newValue}
  }
  /// Returns true if `ppac` has been explicitly set.
  var hasPpac: Bool {return self._ppac != nil}
  /// Clears the value of `ppac`. Subsequent reads from it will return its default value.
  mutating func clearPpac() {self._ppac = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _common: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon? = nil
  fileprivate var _ppac: SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersIOS? = nil
}

struct SAP_Internal_V2_PPDDErrorLogSharingParametersAndroid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon {
    get {return _common ?? SAP_Internal_V2_PPDDErrorLogSharingParametersCommon()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {self._common = nil}

  var ppac: SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersAndroid {
    get {return _ppac ?? SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersAndroid()}
    set {_ppac = newValue}
  }
  /// Returns true if `ppac` has been explicitly set.
  var hasPpac: Bool {return self._ppac != nil}
  /// Clears the value of `ppac`. Subsequent reads from it will return its default value.
  mutating func clearPpac() {self._ppac = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _common: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon? = nil
  fileprivate var _ppac: SAP_Internal_V2_PPDDPrivacyPreservingAccessControlParametersAndroid? = nil
}

struct SAP_Internal_V2_PPDDErrorLogSharingParametersCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal.v2"

extension SAP_Internal_V2_PPDDErrorLogSharingParametersIOS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PPDDErrorLogSharingParametersIOS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "ppac"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ppac) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._ppac {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_PPDDErrorLogSharingParametersIOS, rhs: SAP_Internal_V2_PPDDErrorLogSharingParametersIOS) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs._ppac != rhs._ppac {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_PPDDErrorLogSharingParametersAndroid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PPDDErrorLogSharingParametersAndroid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "ppac"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ppac) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._ppac {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_PPDDErrorLogSharingParametersAndroid, rhs: SAP_Internal_V2_PPDDErrorLogSharingParametersAndroid) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs._ppac != rhs._ppac {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_Internal_V2_PPDDErrorLogSharingParametersCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PPDDErrorLogSharingParametersCommon"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon, rhs: SAP_Internal_V2_PPDDErrorLogSharingParametersCommon) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
